@startuml
class ToDoListApplication {
    start()
    main(launch)
}

class ListManager {
    List<ToDoList> manager = new ArrayList<>()
    String fileLocation
    File f = new File(getFileLocation + "/" + getFile)

    writeToFile(String f, ListManager manager)
    ListManager loadList(String location)
    String getFileLocation()
    String getFile()
}

class ToDoListFunctions {
String title;
    List<Item> itemList = new ArrayList<>()

   List<Item> clearAll()
    addItem(Item newItem)
    displayAll()
    displayCompletedTasks(List<Item> displayList)
    displayIncompleteTasks(List<Item> displayList)
}

class Item {
    String name
    String description
    String dueDate
    String complete

    Item()
    Item(String itemName, String description, String dueDate, String complete)
    String getName()
    String getDescription()
    String getDueDate()
    changeComplete()
}
ToDoListApplication --o MainMenuController
ListManager --o ToDoListFunctions
ToDoListFunctions --o Item

class MainMenuController{
    <Item>todoList
    ListManager lm
    -TextField fileLocationAndName
    +TableView<Item> tableView
    -TableColumn<Item, String> completeColumn
    -TableColumn<Item, String> nameColumn
    -TableColumn<Item, String> descriptionColumn
    -TableColumn<Item, String> dueDateColumn
    -RadioButton showAllItems
    -RadioButton showIncompleteItems
    -RadioButton showCompletedItems

     +changeItemViewOnRadioToggle()
     +toggleCompletionOnButtonPress()
     +removeItemFromTable()
     +clearAllItemsFromTable()
     +saveListToTextFile()
     +popupAddItemSceneOnButtonPress()
     +popupEditItemSceneOnButtonPress()
     +changeToLoadFileSceneOnButtonPress()
     +closeWindowOnExitButtonPress()
     +initialize(URL location, ResourceBundle resources)
     +loadTable(ListManager lm)
}

class AddItemController{
    ListManager lm = new ListManager
    Item newItem = new Item()
    -Label errorLabel
    -TextField itemName
    -TextField itemDescription
    -DatePicker itemDueDate

    +getItemInfo(MouseEvent event)
}

class EditItemController{
    Item newItem = new Item()
    ListManager lm = new ListManager()
    -Label errorLabel
    -TextField itemName
    -TextField itemDescription
    -DatePicker itemDueDate

    +editItemInfo(MouseEvent event)
    +showItemInfo(Item selectedItem)
}

class LoadPreviousListController{
    ListManager lm = new ListManager()
    -TextField filePath
    -Label label

    +getFilePath(MouseEvent event)
}

MainMenuController --o LoadPreviousListController
MainMenuController --o AddItemController
MainMenuController --o EditItemController

@enduml